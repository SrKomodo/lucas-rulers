"use strict";var precacheConfig=[["https://arguablykomodo.github.io/lucas-rulers/bgDark.f3f3e476c1fddf37f7839cc6967dbf36.jpg","f3f3e476c1fddf37f7839cc6967dbf36"],["https://arguablykomodo.github.io/lucas-rulers/bgLight.2e54d3640661b4fa73f2df25226fb450.jpg","2e54d3640661b4fa73f2df25226fb450"],["https://arguablykomodo.github.io/lucas-rulers/bundle.90dc8c106e6bc83f85504e0a3c59abf3.css","90dc8c106e6bc83f85504e0a3c59abf3"],["https://arguablykomodo.github.io/lucas-rulers/bundle.d6624eeaab1fa56adf73.js","8acbda398e3784e8dc2a1e54369f4c3f"],["https://arguablykomodo.github.io/lucas-rulers/icon.png","1e55a7b71a0d6862872657afd75362b4"],["https://arguablykomodo.github.io/lucas-rulers/icon_128x128.2207028d94aabfe8dbb5e7a1bce090f6.png","2207028d94aabfe8dbb5e7a1bce090f6"],["https://arguablykomodo.github.io/lucas-rulers/icon_192x192.cfd2febcaf5b578f3cf5202c826cba3b.png","cfd2febcaf5b578f3cf5202c826cba3b"],["https://arguablykomodo.github.io/lucas-rulers/icon_256x256.19427fc3357f58c3849840a5d700ac5f.png","19427fc3357f58c3849840a5d700ac5f"],["https://arguablykomodo.github.io/lucas-rulers/icon_484x484.3a022b9d347513fba8dcf467b1adffee.png","3a022b9d347513fba8dcf467b1adffee"],["https://arguablykomodo.github.io/lucas-rulers/icon_512x512.830dc307ae772848ad9972eda11c6424.png","830dc307ae772848ad9972eda11c6424"],["https://arguablykomodo.github.io/lucas-rulers/icon_96x96.b4acfbc0dd620f13f793bd87d17a1572.png","b4acfbc0dd620f13f793bd87d17a1572"],["https://arguablykomodo.github.io/lucas-rulers/index.html","82ab19653ae9e9dcb2a084c89beee599"],["https://arguablykomodo.github.io/lucas-rulers/manifest.df7e4b09ea9c39c71369ad38e626f154.json","df7e4b09ea9c39c71369ad38e626f154"],["https://arguablykomodo.github.io/lucas-rulers/rulers.9d00c70823ab7008fae528eea878c4e3.png","9d00c70823ab7008fae528eea878c4e3"]],cacheName="sw-precache-v3-lucas-rulers-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,t,a,r){var n=new URL(e);return r&&n.pathname.match(r)||(n.search+=(n.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),n.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],r=new URL(t,self.location),n=createCacheKey(r,hashParamName,a,/\.\w{8,}\./);return[r.toString(),n]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var r=new Request(a,{credentials:"same-origin"});return fetch(r).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),r="index.html";(t=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,r),t=urlsToCacheKeys.has(a));var n="https://arguablykomodo.github.io/lucas-rulers/index.html";!t&&"navigate"===e.request.mode&&isPathWhitelisted([],e.request.url)&&(a=new URL(n,self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});